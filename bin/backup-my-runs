#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'backup-my-runs_version'
require 'backup_my_runs'

include GLI

program_desc 'Backups your Runkeeper activities'

version BackupMyRuns::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]



desc 'Downloads and saves Runkeeper activities'
arg_name 'Describe arguments to backupmyruns here'
command :backup do |c|

  c.desc 'The directory to write to the files to'
  c.default_value '/tmp'
  c.arg_name 'dir'
  c.flag [:dir]

  c.desc 'The username whose activities will be downloaded'
  c.arg_name 'username'
  c.flag [:username]

  c.desc 'Limit the number of activities downloaded'
  c.arg_name 'limit'
  c.flag [:limit]

  c.desc 'Dry-run, do not download any activities'
  c.switch [:dry]

  c.action do |global_options,options,args|
    raise 'username is blank' if options[:username].nil?
    raise 'if limit is set, it must be greater than zero' if options[:limit] && options[:limit].to_i <= 0

    limit = options[:limit].to_i > 0 ? options[:limit].to_i : nil
    BackupMyRuns::User.download(options[:username], options[:dir], options[:dry], limit)


    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
